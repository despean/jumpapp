'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { 
  ArrowLeftIcon, 
  DocumentTextIcon, 
  ClockIcon, 
  UserGroupIcon,
  EnvelopeIcon,
  ShareIcon,
  EyeIcon
} from '@heroicons/react/24/outline';
import { PlatformLogo } from '@/components/PlatformLogos';
import Link from 'next/link';

interface Meeting {
  id: string;
  title: string;
  platform?: string;
  startTime: string;
  duration?: number;
  attendees?: string;
  transcript?: {
    content: string;
    duration: number;
    attendees: string;
  };
  status: string;
}

interface Attendee {
  id: string;
  name: string;
}

interface SocialMediaPost {
  id: string;
  platform: string;
  content: string;
  status: 'draft' | 'scheduled' | 'published';
  scheduledFor?: string;
}

export default function MeetingDetailPage() {
  const params = useParams();
  const router = useRouter();
  const { status } = useSession();
  const [meeting, setMeeting] = useState<Meeting | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'transcript' | 'email' | 'social'>('transcript');

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/');
      return;
    }

    if (status === 'authenticated' && params.id) {
      fetchMeetingDetails();
    }
  }, [status, params.id, router]);

  const fetchMeetingDetails = async () => {
    try {
      const response = await fetch(`/api/meetings/${params.id}`);
      const data = await response.json();
      
      if (response.ok) {
        setMeeting(data.meeting);
      } else {
        setError(data.error || 'Failed to fetch meeting details');
      }
    } catch (err) {
      setError('Failed to load meeting details');
    } finally {
      setLoading(false);
    }
  };

  const formatDuration = (minutes?: number) => {
    if (!minutes) return 'N/A';
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
      return `${hours}h ${mins}m`;
    }
    return `${mins}m`;
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const parseAttendees = (attendeesJson?: string): Attendee[] => {
    if (!attendeesJson) return [];
    try {
      const parsed = JSON.parse(attendeesJson);
      return Array.isArray(parsed) ? parsed : [];
    } catch {
      return [];
    }
  };

  // Mock data for AI-generated content (placeholders)
  const mockFollowUpEmail = `Subject: Follow-up from our meeting - ${meeting?.title}

Hi team,

Thank you for joining today's productive meeting. Here are the key takeaways and action items:

**Key Discussion Points:**
• [AI will extract main topics discussed]
• [AI will identify important decisions made]
• [AI will highlight key insights shared]

**Action Items:**
• [AI will identify tasks assigned during the meeting]
• [AI will extract deadlines and responsibilities]
• [AI will note follow-up meetings needed]

**Next Steps:**
• [AI will suggest logical next steps based on discussion]

Please let me know if I missed anything or if you have additional thoughts.

Best regards,
[Your Name]

---
This email was generated by JumpApp AI based on your meeting transcript.`;

  const mockSocialPosts: SocialMediaPost[] = [
    {
      id: '1',
      platform: 'LinkedIn',
      content: `Just wrapped up an insightful meeting about ${meeting?.title || '[Meeting Topic]'}. Key insights: [AI will extract 2-3 main points from transcript]. Excited about the next steps! #productivity #teamwork`,
      status: 'draft'
    },
    {
      id: '2',
      platform: 'Facebook',
      content: `Great discussion today with the team! We covered some important ground on ${meeting?.title || '[Meeting Topic]'}. [AI will create engaging summary]. Looking forward to implementing these ideas! 💡`,
      status: 'draft'
    },
    {
      id: '3',
      platform: 'Twitter',
      content: `Productive meeting ✅ Key takeaways: [AI will create concise bullet points]. ${meeting?.title || '[Meeting Topic]'} #meetings #productivity`,
      status: 'draft'
    }
  ];

  if (status === 'loading' || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <DocumentTextIcon className="mx-auto h-12 w-12 text-red-400" />
            <h3 className="mt-2 text-lg font-medium text-gray-900">Error loading meeting</h3>
            <p className="mt-1 text-sm text-gray-500">{error}</p>
            <div className="mt-6">
              <Link
                href="/"
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
              >
                <ArrowLeftIcon className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!meeting) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <DocumentTextIcon className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-2 text-lg font-medium text-gray-900">Meeting not found</h3>
            <p className="mt-1 text-sm text-gray-500">The meeting you're looking for doesn't exist.</p>
            <div className="mt-6">
              <Link
                href="/"
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
              >
                <ArrowLeftIcon className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const attendees = parseAttendees(meeting.transcript?.attendees || meeting.attendees);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <div className="flex items-center space-x-4">
              <Link
                href="/"
                className="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700"
              >
                <ArrowLeftIcon className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Link>
            </div>
            
            <div className="mt-4 flex items-center space-x-4">
              <PlatformLogo platform={meeting.platform} className="h-12 w-12" />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">{meeting.title}</h1>
                <div className="mt-1 flex items-center space-x-4 text-sm text-gray-500">
                  <span className="flex items-center">
                    <ClockIcon className="h-4 w-4 mr-1" />
                    {formatDate(meeting.startTime)}
                  </span>
                  
                  {(meeting.transcript?.duration || meeting.duration) && (
                    <span className="flex items-center">
                      <ClockIcon className="h-4 w-4 mr-1" />
                      Duration: {formatDuration(meeting.transcript?.duration || meeting.duration)}
                    </span>
                  )}
                  
                  {attendees.length > 0 && (
                    <span className="flex items-center">
                      <UserGroupIcon className="h-4 w-4 mr-1" />
                      {attendees.length} attendee{attendees.length !== 1 ? 's' : ''}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex space-x-8" aria-label="Tabs">
            <button
              onClick={() => setActiveTab('transcript')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'transcript'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <DocumentTextIcon className="h-5 w-5 inline mr-2" />
              Full Transcript
            </button>
            <button
              onClick={() => setActiveTab('email')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'email'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <EnvelopeIcon className="h-5 w-5 inline mr-2" />
              Follow-up Email
            </button>
            <button
              onClick={() => setActiveTab('social')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'social'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <ShareIcon className="h-5 w-5 inline mr-2" />
              Social Media Posts
            </button>
          </nav>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'transcript' && (
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900">Meeting Transcript</h3>
              {attendees.length > 0 && (
                <div className="mt-2">
                  <p className="text-sm text-gray-500">Attendees:</p>
                  <div className="mt-1 flex flex-wrap gap-2">
                    {attendees.map((attendee, index) => (
                      <span
                        key={index}
                        className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                      >
                        {attendee.name}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
            <div className="px-6 py-6">
              {meeting.transcript?.content ? (
                <div className="prose max-w-none">
                  <div className="whitespace-pre-wrap text-gray-900 leading-relaxed">
                    {meeting.transcript.content}
                  </div>
                </div>
              ) : (
                <div className="text-center py-12">
                  <DocumentTextIcon className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-lg font-medium text-gray-900">No transcript available</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    The transcript for this meeting is still being processed or is not available.
                  </p>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'email' && (
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900">AI-Generated Follow-up Email</h3>
              <p className="mt-1 text-sm text-gray-500">
                Draft email based on meeting transcript and key discussion points
              </p>
            </div>
            <div className="px-6 py-6">
              {meeting.transcript?.content ? (
                <div className="space-y-4">
                  <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
                    <div className="flex">
                      <div className="flex-shrink-0">
                        <DocumentTextIcon className="h-5 w-5 text-amber-400" />
                      </div>
                      <div className="ml-3">
                        <h3 className="text-sm font-medium text-amber-800">
                          AI Content Generation Coming Soon
                        </h3>
                        <div className="mt-2 text-sm text-amber-700">
                          <p>This is a placeholder for AI-generated follow-up email based on your meeting transcript.</p>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
                    <pre className="whitespace-pre-wrap text-sm text-gray-900 font-mono">
                      {mockFollowUpEmail}
                    </pre>
                  </div>
                  
                  <div className="flex justify-end space-x-3">
                    <button className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                      Edit Draft
                    </button>
                    <button className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                      Send Email
                    </button>
                  </div>
                </div>
              ) : (
                <div className="text-center py-12">
                  <EnvelopeIcon className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-lg font-medium text-gray-900">No transcript available</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    A transcript is needed to generate the follow-up email.
                  </p>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'social' && (
          <div className="space-y-6">
            <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <ShareIcon className="h-5 w-5 text-amber-400" />
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-amber-800">
                    AI Social Media Generation Coming Soon
                  </h3>
                  <div className="mt-2 text-sm text-amber-700">
                    <p>These are placeholders for AI-generated social media posts based on your meeting content.</p>
                  </div>
                </div>
              </div>
            </div>

            {mockSocialPosts.map((post) => (
              <div key={post.id} className="bg-white shadow rounded-lg">
                <div className="px-6 py-4 border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="flex-shrink-0">
                        {post.platform === 'LinkedIn' && (
                          <div className="h-8 w-8 bg-blue-600 rounded flex items-center justify-center">
                            <span className="text-white text-xs font-bold">in</span>
                          </div>
                        )}
                        {post.platform === 'Facebook' && (
                          <div className="h-8 w-8 bg-blue-500 rounded flex items-center justify-center">
                            <span className="text-white text-xs font-bold">f</span>
                          </div>
                        )}
                        {post.platform === 'Twitter' && (
                          <div className="h-8 w-8 bg-sky-400 rounded flex items-center justify-center">
                            <span className="text-white text-xs font-bold">𝕏</span>
                          </div>
                        )}
                      </div>
                      <div>
                        <h4 className="text-lg font-medium text-gray-900">{post.platform}</h4>
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                          {post.status}
                        </span>
                      </div>
                    </div>
                    
                    <div className="flex space-x-2">
                      <button className="inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50">
                        <EyeIcon className="h-4 w-4 mr-1" />
                        Preview
                      </button>
                      <button className="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-white bg-indigo-600 hover:bg-indigo-700">
                        Schedule Post
                      </button>
                    </div>
                  </div>
                </div>
                
                <div className="px-6 py-4">
                  <div className="bg-gray-50 rounded-lg p-4">
                    <p className="text-sm text-gray-900 whitespace-pre-wrap">{post.content}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
